# -*- coding: utf-8 -*-

# import vyom2.types
from vyom2 import NotPassed


def merge(o1, o2):
    o = {}
    for key in o1:
        if o1.hasOwnProperty(key):
            o[key] = o1[key]
    for key in o2:
        if o2.hasOwnProperty(key):
            o[key] = o2[key]
    return o


def Observable(val=None):
    # TODO: type is inspired by React's propType
    # look at React's documentation to see all types
    # and possibly how to implement the checks.

    # it is optional feature, and call
    # vyom.setup(check_types=True) to activate it

    value = val
    connections = list()

    ovable = def (val=NotPassed, replace=False):
        nonlocal value
        if val is NotPassed:
            return value

        ovalue = value
        if replace:
            value = val
        else:
            value = merge(ovalue, val)

        for fn in connections:
            fn(value, ovalue)

    ovable.connect = def (fn, bind=NotPassed):
        connections.append(fn)

        return {
            "remove": def ():
                connections.remove(fn)
        }

    ovable.is_observable = True
    return ovable
