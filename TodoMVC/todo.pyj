from vyom.parser import parse
from vyom.utils import init
from vyom.controllers import Controller
from vyom.events import Observable


todos = Observable([])
the_filter = Observable("all")

class Header(Controller):
    def init(self):
        self.data = Observable({"todos": todos()})
        self.widget = self.create_widget(HeaderView, self.data, {
            "input": self.input.bind(self)
        })

    def input(self, value):
        c = todos()
        c.push({"text": value, "done": False})
        todos(c, True)


class ShowHide(Controller):
    def show_hide_init(self):
        self.show_hide()
        todos.connect(self.show_hide.bind(self))
        the_filter.connect(self.on_filter.bind(self))

    def on_filter(self):
        self.data({"filter": the_filter()})

    def show_hide(self):
        data = todos()
        if data.length == 0:
            $(self.elem).hide()
        else:
            $(self.elem).show()
        self.data({"todos": data})


class Main(ShowHide):
    def init(self):
        self.elem = self.data.elem
        self.data = Observable({"todos": todos(), "filter": the_filter()})
        self.widget = self.create_widget(MainView, self.data, {
            "toggle_all": self.toggle_all.bind(self),
            "toggle": self.toggle.bind(self),
            "deleteit": self.deleteit.bind(self),
        })
        self.show_hide_init()

    def deleteit(self, idx):
        c = todos()
        c.splice(idx, 1)
        todos(c, True)

    def toggle(self, idx, checked):
        c = todos()
        c[idx].done = checked
        todos(c, True)

    def toggle_all(self, evt):
        c = todos()
        for item in c:
            item.done = evt.target.checked
        todos(c, True)


class Footer(ShowHide):
    def init(self):
        self.elem = self.data.elem
        self.data = Observable({"todos": todos(), "filter": the_filter()})
        self.widget = self.create_widget(FooterView, self.data, {
            "clear_completed": self.clear_completed.bind(self),
            "filter_all": self.filter_all.bind(self),
            "filter_active": self.filter_active.bind(self),
            "filter_completed": self.filter_completed.bind(self),
        })
        self.show_hide_init()

    def filter_all(self):
        the_filter("all", true)

    def filter_active(self):
        the_filter("active", true)

    def filter_completed(self):
        the_filter("completed", true)

    def clear_completed(self):
        c = todos()
        newc = []
        for item in c:
            if item.done:
                continue
            newc.push(item)
        todos(newc, True)


def main():
    parse()


init(main)